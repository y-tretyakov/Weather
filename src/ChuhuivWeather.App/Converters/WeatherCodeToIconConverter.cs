using System;
using System.Globalization;
using System.Windows.Data;

namespace ChuhuivWeather.App.Converters;

/// <summary>
/// Converter that maps WMO weather codes to weather icons/emojis
/// </summary>
public class WeatherCodeToIconConverter : IValueConverter
{
    /// <summary>
    /// Converts WMO weather code to corresponding weather icon
    /// </summary>
    /// <param name="value">WMO weather code (int)</param>
    /// <param name="targetType">Target type (not used)</param>
    /// <param name="parameter">Converter parameter (not used)</param>
    /// <param name="culture">Culture information (not used)</param>
    /// <returns>Weather icon string</returns>
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is not int weatherCode)
            return "‚ùì"; // Unknown weather

        return weatherCode switch
        {
            // Clear sky
            0 => "‚òÄÔ∏è",
            
            // Mainly clear, partly cloudy, and overcast
            1 => "üå§Ô∏è", // Mainly clear
            2 => "‚õÖ", // Partly cloudy  
            3 => "‚òÅÔ∏è", // Overcast
            
            // Fog and depositing rime fog
            45 => "üå´Ô∏è", // Fog
            48 => "üå´Ô∏è", // Depositing rime fog
            
            // Drizzle: Light, moderate, and dense intensity
            51 => "üå¶Ô∏è", // Light drizzle
            53 => "üå¶Ô∏è", // Moderate drizzle
            55 => "üå¶Ô∏è", // Dense drizzle
            
            // Freezing Drizzle: Light and dense intensity
            56 => "üåßÔ∏è", // Light freezing drizzle
            57 => "üåßÔ∏è", // Dense freezing drizzle
            
            // Rain: Slight, moderate and heavy intensity
            61 => "üåßÔ∏è", // Slight rain
            63 => "üåßÔ∏è", // Moderate rain
            65 => "üåßÔ∏è", // Heavy rain
            
            // Freezing Rain: Light and heavy intensity
            66 => "üåßÔ∏è", // Light freezing rain
            67 => "üåßÔ∏è", // Heavy freezing rain
            
            // Snow fall: Slight, moderate, and heavy intensity
            71 => "üå®Ô∏è", // Slight snow fall
            73 => "üå®Ô∏è", // Moderate snow fall
            75 => "üå®Ô∏è", // Heavy snow fall
            
            // Snow grains
            77 => "üå®Ô∏è", // Snow grains
            
            // Rain showers: Slight, moderate, and violent
            80 => "üå¶Ô∏è", // Slight rain showers
            81 => "üåßÔ∏è", // Moderate rain showers
            82 => "üåßÔ∏è", // Violent rain showers
            
            // Snow showers slight and heavy
            85 => "üå®Ô∏è", // Slight snow showers
            86 => "üå®Ô∏è", // Heavy snow showers
            
            // Thunderstorm: Slight or moderate
            95 => "‚õàÔ∏è", // Thunderstorm
            
            // Thunderstorm with slight and heavy hail
            96 => "‚õàÔ∏è", // Thunderstorm with slight hail
            99 => "‚õàÔ∏è", // Thunderstorm with heavy hail
            
            // Default case for unknown codes
            _ => "‚ùì"
        };
    }

    /// <summary>
    /// Converts back from icon to weather code (not implemented)
    /// </summary>
    /// <param name="value">Icon value</param>
    /// <param name="targetType">Target type</param>
    /// <param name="parameter">Converter parameter</param>
    /// <param name="culture">Culture information</param>
    /// <returns>Not supported</returns>
    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotSupportedException("Converting back from icon to weather code is not supported.");
    }
}

/// <summary>
/// Converter that maps WMO weather codes to descriptive text
/// </summary>
public class WeatherCodeToDescriptionConverter : IValueConverter
{
    /// <summary>
    /// Converts WMO weather code to weather description in Russian
    /// </summary>
    /// <param name="value">WMO weather code (int)</param>
    /// <param name="targetType">Target type (not used)</param>
    /// <param name="parameter">Converter parameter (not used)</param>
    /// <param name="culture">Culture information (not used)</param>
    /// <returns>Weather description string</returns>
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is not int weatherCode)
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";

        return weatherCode switch
        {
            0 => "–Ø—Å–Ω–æ",
            1 => "–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ",
            2 => "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
            3 => "–ü–∞—Å–º—É—Ä–Ω–æ",
            45 => "–¢—É–º–∞–Ω",
            48 => "–¢—É–º–∞–Ω —Å –∏–∑–º–æ—Ä–æ–∑—å—é",
            51 => "–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
            53 => "–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å",
            55 => "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
            56 => "–õ–µ–≥–∫–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
            57 => "–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
            61 => "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å",
            63 => "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
            65 => "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
            66 => "–ù–µ–±–æ–ª—å—à–æ–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
            67 => "–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
            71 => "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥",
            73 => "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥",
            75 => "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
            77 => "–°–Ω–µ–∂–Ω–∞—è –∫—Ä—É–ø–∞",
            80 => "–ù–µ–±–æ–ª—å—à–∏–µ –ª–∏–≤–Ω–∏",
            81 => "–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏–≤–Ω–∏",
            82 => "–°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏",
            85 => "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥–æ–ø–∞–¥",
            86 => "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥",
            95 => "–ì—Ä–æ–∑–∞",
            96 => "–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º",
            99 => "–ì—Ä–æ–∑–∞ —Å –∫—Ä—É–ø–Ω—ã–º –≥—Ä–∞–¥–æ–º",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        };
    }

    /// <summary>
    /// Converts back from description to weather code (not implemented)
    /// </summary>
    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotSupportedException("Converting back from description to weather code is not supported.");
    }
}